tree grammar TTGrammarEvaluator;

options {
  language = Java;
  tokenVocab = TTGrammar;
  ASTLabelType = CommonTree;
}

@header {
  package columbia.plt.tt;
  import columbia.plt.tt.datatype.Calendar;
  import columbia.plt.tt.datatype.Date;
  import columbia.plt.tt.datatype.Task;
  import columbia.plt.tt.datatype.TimeFrame;
  import columbia.plt.tt.interpreter.*;
  import columbia.plt.tt.evaluator.implementations.*;
  import org.antlr.runtime.BitSet;
  import java.util.*;
}

@members {
  private SymbolTable symbolTable = new SymbolTable();

  private ArrayList<String> errors = new ArrayList<String>();  
  
  public ArrayList<String> getErrors()
  {
	return errors;
  }
}


// Variable declaration and definition
//@Author : Athresh

declarationStatement
  : ^(e=type IDENT) {			
  	
  		
  		//we can try switch here if all of you are using java 7
  		if( e == "String"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "String", null);				

  		}
  		if( e == "Number"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "Number", null);				
 
  		}
  		if( e == "Bool"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "Bool", null);				
 
  		}
  		
  		if( e == "Date"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "Date", null);					
  		
  		}
  		if( e == "TimeFrame"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "TimeFrame", null);				

  		}
  		if (e == "Calendar") {				
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "Calendar", null);				
  			
  		}
  		if( e == "Task"){
  			int scopeID = symbolTable.addScope();
  			symbolTable.getScope(scopeID).addSymbol($IDENT.text, "Task", null);				
  		}
  	}
  ;

definitionStatement
	: ^(t=type as=assignmentStmt) {
	
		if(t == "String"){
			// code to check if as is string
		}
	
	}
	
	;

assignmentStmt returns [Evaluator result]
	:	^(ASSIGN IDENT e=expression)
	| ^(ASSIGN memberAccessExpression e=expression)
	;

type returns [String result]
  : 'String' {result = "String";}
  | 'Number' {result = "Number";}
  | 'Bool' {result = "Bool";}
  | 'Date' {result = "Date";}
  | 'Task' {result = "Task";}
  | 'TimeFrame' {result = "TimeFrame";}
  | 'Calendar' {result = "Calendar";}
  ;

//zheng
checkType returns [BOOL result]
  : 
  ;
  
memberAccessExpression
	:	^(' IDENT IDENT )
	;
	

